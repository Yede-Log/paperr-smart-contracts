async function main() {
  // The CredentialAtomicQuerySigValidator contract is used to verify any claim-related zk proof generated by user using the credentialAtomicQuerySig circuit.
  // https://0xpolygonid.github.io/tutorials/contracts/overview/#credentialatomicquerysigvalidator
  const schemaHash = "3de5251d2baa7b60a173b14067cfc590" // extracted from PID Platform

  const schemaEnd = fromLittleEndian(hexToBytes(schemaHash))
  
  const circuitId = "credentialAtomicQuerySig";

  // CredentialAtomicQuerySigValidator Mumbai address
  const validatorAddress = "0xb1e86C4c687B85520eF4fd2a0d14e81970a15aFB";

  // Query language: https://0xpolygonid.github.io/tutorials/verifier/verification-library/zk-query-language/

  const ageQuery = {
    schema: ethers.BigNumber.from(schemaEnd),
    slotIndex: 2,
    operator: 3,
    value: [2, ...new Array(63).fill(0).map((i) => 0)],
    circuitId,
  };

  // add the address of the contract just deployed
  CommunityDAOAddress = "0x3228647198E56B5B5fCf90638F1425e11885938d";

  let CommunityDAOContract = await hre.ethers.getContractAt(
    "CommunityDAO",
    CommunityDAOAddress
  );

  const requestId = await CommunityDAOContract.MEMBERSHIP_REQUEST_ID();

  try {
    await CommunityDAOContract.setZKPRequest(requestId, validatorAddress, ageQuery);
    console.log("Request set");
  } catch (e) {
    console.log("error: ", e);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

function hexToBytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

function fromLittleEndian(bytes) {
    const n256 = BigInt(256);
    let result = BigInt(0);
    let base = BigInt(1);
    bytes.forEach((byte) => {
      result += base * BigInt(byte);
      base = base * n256;
    });
    return result;
}